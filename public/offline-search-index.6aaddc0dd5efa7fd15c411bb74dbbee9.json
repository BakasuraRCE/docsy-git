[{"body":"\rOur goal is to build and publish the documentation site using Jekyll and Netlify. The end result will look like this: https://sample-jekyll.netlify.app\n\rDownload the theme from the GitHub repo   Sign up for GitHub.\n  If you already have the account there, sign in.\n  Go to Tom’s repository.\n  Click the Code button and select Download ZIP.\n  Save the ZIP file to your computer and unzip the contents where you like. Now you have the folder with code and content. Let’s proceed with building our documentation site from all this.\n   Install Ruby on Windows  Before we install Jekyll that compiles our site, we need to install Ruby. Jekyll is a Ruby-based program and needs Ruby to run.\n   Go to RubyInstaller for Windows.\n  Install the recommended Ruby+Devkit 2.6.X (x64) version.\n  Install everything by default.\n  When the installation completes, you see this command prompt screen. Press Enter`** two times when prompted.\n  When the installation in the command prompt exits, let’s assume that we have Ruby installed. If you want to make sure, open the command prompt and type ruby -v and press Enter.\n   Install Jekyll   To install Jekyll, enter gem install jekyll in the command prompt and press Enter.\n  Check if Jekyll has been installed properly: enter jekyll -v and press Enter.\n   Install Bundler   Browse to the directory where you downloaded the Documentation theme for Jekyll.\n  Delete the existing Gemfile and Gemfile.lock files.\n  Change directory First, you need to change the directory in the Command Prompt.\n  In your file explorer, copy the path to the unzipped folder with your project.\n  In the Command prompt, enter cd and right-click to paste the copied path.\n  Press Enter to change the directory. Now you can execute commands in the project directory.\n   Install Bundler   To install Bundler, enter gem install bundler and press Enter.\n  Enter the following commands:\nbundle init bundle install These commands created new Gemfile files in your project folder.\n  Open the Gemfile with Notepad.\n  Delete everything in this file.\n  Enter the following data and save the file.\nsource \"https://rubygems.org\" gem \"jekyll\"    Build the site To build your Jekyll site locally:\n  Change the directory in the Command Prompt: cd documentation-theme-jekyll-gh-pages.\n  Enter jekyll serve.\n  To access the site locally, copy the address from the Command Prompt: http://127.0.0.1:4000\n  Paste the address in your browser and you will see the site.\nYou can access all the site content locally from the project folder.\n  Note\rTo stop the local server where your site is served, press Ctrl+C in the Command Prompt.\r\r CI/CD, GitHub and IDE  Before you publish your site online, you need to create the CI/CD pipeline. While this term sounds mysterious, there is nothing complicated about it.\nYou need to have an editor on your computer where you will change the code and content of your site. This editor should be able to send the changes that you’ve made to your GitHub repository. It’s like a Dropbox folder that syncs your local folder to the cloud.\nFor this example, I will use Visual Studio Code editor/IDE.\n VSCode editor Install VSCode from its official site.\nUseful links for setting up VSCode for viewing and editing Markdown files:\n Using Markdown with Visual Studio Code How-To Guide: Markdown in Visual Studio Code Markdown and Visual Studio Code Lana Novikova’s materials about VScode (In Russian)   Git client  You will also need Git client to connect VSCode to your GitHub repository. It’s the same as using Word (in this case VSCode) to write/edit your document and Dropbox desktop client (in this case Git client) to sync your changes to the cloud server.\n   Install Git client from its official site.\n  Install everything by default. You may close the Git client window.\n   View project folder in the editor   Run the VSCode.\n  Select File \u003e Open Folder.\n  Open the project folder.\nNow you will see the folder contents in the VSCode editor. If you open the folder with content and click the .md file, you will see the file markup.\nNow you can edit the files. But you need to upload this folder to your GitHub repository to sync the changes.\n   Upload project folder to GitHub   Go to the Source Control section of VSCode and click the Publish to GitHub button.\n  Select Publish to GitHub public repository.\n  Select Open in GitHub to open your newly created project repository in GitHub.\nYou will see your project folder structure. Now your local folder is synced to the GitHub cloud server. Every change that you make locally will be synced to the GitHub server.\n   Publish your site  Now when you have built the Documentation Site locally, you wonder how to publish it online for everyone to see. Although Tom tells how to publish his site on GitHub Pages, I don’t recommend this. There are better and easier ways for publishing the sites built with Static Site Generators. For this example I will use Netlify.\n   Sign up to Netlify.\nOr log in, if you already have an account.\n  Press the New site from Git button.\n  Select GitHub as your Git provider.\n  Authorize Netlify’s access to your GitHub repository.\nYou will see the list of your repositories.\n  Pick the repository that you’ve created in the previous step.\n  Select Deploy site.\nYou will see Netlify deploying your site with some funny name.\nNote\rThe building of your site for the first time takes several minutes. Be patient. When the build finishes, you will see the Published status.\r\r  Change the site name to something more relevant.\n  Click the new site name to visit its page. My test site:\nhttps://sample-jekyll.netlify.app/\n   Useful links I used some help from these sites:\n https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/ https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/ https://idratherbewriting.com/documentation-theme-jekyll/index.html https://github.com/tomjoht/documentation-theme-jekyll https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line  ","excerpt":"\rOur goal is to build and publish the documentation site using Jekyll …","ref":"/docs/static-site-generators/jekyll/","title":"Jekyll"},{"body":"\rНаша мета — створити та опублікувати сайт з технічною документацією за допомогою Jekyll та Netlify. Кінцевий результат буде виглядати так: https://sample-jekyll.netlify.app\n\rЗавантажте тему з репозиторію GitHub   Зареєструйтеся на GitHub.\n  Якщо у вас вже є обліковий запис, увійдіть.\n  Перейдіть до репозиторія Тома.\n  Натисніть кнопку Code і виберіть Download ZIP.\n  Збережіть ZIP-файл на своєму комп’ютері та розпакуйте вміст, де вам заманеться. Тепер у вас є папка з кодом та вмістом. Давайте приступимо до створення нашого сайту з усього цього.\n   Встановіть Ruby на Windows  Перш ніж ми встановимо Jekyll, який компілює наш сайт, нам потрібно встановити Ruby. Jekyll — це програма на основі Ruby, для запуску якої потрібен Ruby.\n   Перейдіть до RubyInstaller for Windows.\n  Встановіть рекомендовану версію Ruby+Devkit 2.6.X (x64).\n  Встановіть все за замовчуванням.\n  Після завершення встановлення ви побачите цей екран командного рядка. Натисніть Enter двічі, коли потрібно буде підтвердити вибір.\n  Коли інсталяція в командному рядку завершиться, припустимо, що ми встановили Ruby. Якщо ви хочете переконатися, відкрийте командний рядок і введіть ruby -v і натисніть Enter.\n   Встановіть Jekyll   Щоб встановити Jekyll, введіть gem install jekyll у командному рядку та натисніть Enter.\n  Перевірте, чи правильно встановлено Jekyll: введіть jekyll -v і натисніть Enter.\n   Встановіть Bundler   Перейдіть до каталогу, куди ви завантажили проект для Jekyll.\n  Видаліть існуючі файли Gemfile і Gemfile.lock.\n  Змініть шлях до проекту По-перше, вам потрібно змінити каталог у командному рядку.\n  У провіднику скопіюйте шлях до розпакованої папки з вашим проектом.\n  У командному рядку введіть cd та клацніть правою кнопкою миші, щоб вставити скопійований шлях.\n  Натисніть Enter, щоб змінити каталог. Тепер ви можете виконувати команди в каталозі проекту.\n   Встановіть Bundler   Щоб встановити Bundler, введіть gem install bundler і натисніть Enter.\n  Введіть такі команди:\nbundle init bundle install Ці команди створили нові файли Gemfile у папці проекту.\n  Відкрийте Gemfile за допомогою Блокнота.\n  Видаліть усе в цьому файлі.\n  Введіть наступні дані та збережіть файл.\nsource \"https://rubygems.org\" gem \"jekyll\"    Скомпілюйте сайт Щоб скомпілювати свій сайт Jekyll локально:\n  Змініть каталог в командному рядку: cd documentation-theme-jekyll-gh-pages.\n  Уведіть jekyll serve.\n  Щоб отримати доступ до сайту локально, скопіюйте адресу з командного рядка: http://127.0.0.1:4000\n  Вставте адресу у свій браузер, і ви побачите сайт.\n  Ви можете отримати доступ до всього вмісту сайту локально з папки проекту.\nПримітка\rЩоб зупинити локальний сервер, на якому запущено ваш сайт, натисніть Ctrl+C в командному рядку.\r\r CI/CD, GitHub and IDE  Перш ніж публікувати свій сайт в Інтернеті, вам потрібно створити процес CI / CD. Хоча цей термін звучить загадково, в цьому немає нічого складного.\nНа комп’ютері потрібно мати редактор, де ви будете змінювати код та вміст свого сайту. Цей редактор повинен мати можливість надсилати внесені вами зміни до вашого репозиторія на GitHub. Це як папка Dropbox, яка синхронізує вашу локальну папку з хмарою.\nУ цьому прикладі я буду використовувати редактор / інструмент розробки Visual Studio Code.\n Редактор VSCode Установіть VSCode з офіційного сайту.\nКорисні посилання для налаштування VSCode для перегляду та редагування файлів Markdown:\n Using Markdown with Visual Studio Code How-To Guide: Markdown in Visual Studio Code Markdown and Visual Studio Code Матеріали Лани Новікової про VScode (російською мовою)   Клієнт Git  Вам також знадобиться клієнт Git для підключення VSCode до вашого репозиторія на GitHub. Це те саме, що використовувати Word (в даному випадку VSCode) для написання / редагування документа, а десктопний клієнт Dropbox (в даному випадку клієнт Git) для синхронізації змін із хмарним сервером.\n   Встановіть клієнт Git з його офіційного сайту.\n  Встановіть все за замовчуванням. Ви можете закрити вікно клієнта Git.\n   Перегляньте папку проекта в редакторі   Запустіть VSCode.\n  Виберіть File \u003e Open Folder.\n  Відкрийте папку проекта.\nТепер ви побачите вміст папки в редакторі VSCode. Якщо відкрити папку із вмістом і натиснути файл .md, ви побачите розмітку файла.\nТепер ви можете редагувати файли. Але вам потрібно завантажити цю папку до вашого репозиторія GitHub, щоб синхронізувати зміни.\n   Завантажте папку проекта на GitHub   Перейдіть до розділу Source Control у VSCode і натисніть кнопку Publish to GitHub.\n  Виберіть Publish to GitHub public repository.\n  Виберіть Open in GitHub, щоб відкрити щойно створений репозиторий проекта на GitHub.\nВи побачите структуру папок вашого проекта. Тепер ваша локальна папка синхронізується із хмарним сервером GitHub. Кожну зміна, яку ви внесете локально, буде синхронізовано з сервером GitHub.\n   Опублікуйте свій сайт  Тепер, коли ви скомпілювали свій сайт з документацією локально, ви задаєтесь питанням, як опублікувати його в Інтернеті, щоб його бачили всі. Хоча Том розповідає, як опублікувати свій сайт на GitHub Pages, я не рекомендую цього. Існують кращі та простіші способи публікації сайтів, побудованих за допомогою статичних генераторів сайтів. Для цього прикладу я буду використовувати Netlify.\n   Зареєструйтесь у Netlify.\nАбо увійдіть, якщо у вас вже є обліковий запис.\n  Натисніть кнопку New site from Git.\n  Виберіть GitHub як провайдера Git.\n  Дозвольте доступ Netlify до вашого репозиторія на GitHub.\nВи побачите список своїх репозиторіїв.\n  Виберіть репозиторій, який ви створили в попередньому кроці.\n  Виберіть Deploy site.\nВи побачите, як Netlify компілює ваш сайт з якоюсь кумедною назвою.\nПримітка\rКомпіляція вашого сайту вперше займає кілька хвилин. Наберіться терпіння. Коли компіляція завершиться, ви побачите статус Published.\r\r  Змініть назву сайту на будь-яку доступну.\n  Клацніть нову назву сайту, щоб відвідати його сторінку. Маєте побачити свій сайт, який буде виглядати так:\nhttps://sample-jekyll.netlify.app/\n   Корисні посилання Я скористався порадами з цих сайтів:\n https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/ https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/ https://idratherbewriting.com/documentation-theme-jekyll/index.html https://github.com/tomjoht/documentation-theme-jekyll https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line  ","excerpt":"\rНаша мета — створити та опублікувати сайт з технічною документацією …","ref":"/ua/docs/static-site-generators/jekyll/","title":"Jekyll"},{"body":"\rOur goal is to build and publish the API documentation site using Jekyll and Vercel. The end result will look like this:\nhttps://aviator-jekyll-template-master.vercel.app\n\rPrerequisites  Assume that you have Jekyll, Git client, and Visual Studio Code editor installed on your computer. If not, read the Jekyll article first.\n To check that you have Jekyll installed:\n  Open Command Prompt.\n  Enter jekyll -v and press Enter.\n  To check that you have Git and VSCode installed:\n  In the Command Prompt, enter git --version.\n  Check that you have Visual Studio Code installed.\n   Download the theme To download the Jekyll theme for your API documentation site:\n  Go to the theme GitHub repository.\n  Select Code.\n  Select Download ZIP.\n  Save the zipped project folder to your computer.\n  Unzip the folder.\n   Launch the site locally  Before publishing this site online, let’s check how the site runs locally on your computer.\n Install Bundler   Browse to the location where you unzipped the project folder.\n  Delete the existing Gemfile and Gemfile.lock files.\n  In the file explorer, copy the path to the project folder.\nIn my case, it’s c:\\Users\\ivanc\\aviator-jekyll-template-master\\\n  In the Command Prompt, change the directory to your project folder path. Press Enter.\ncd c:\\Users\\ivanc\\aviator-jekyll-template-master\\\n  Enter gem install bundler and press Enter.\n  Enter the following commands.\nbundle init bundle install These commands created new Gemfile files in your project folder.\n   Bundle update   Open the Gemfile with Notepad.\n  Delete everything in this file.\n  Enter the following data and save the file.\nsource 'https://rubygems.org' gem 'jekyll', '3.7.2' gem 'tzinfo-data' group :jekyll_plugins do gem 'jekyll-seo-tag', '2.4.0' gem 'jekyll-sitemap', '1.2.0' end   Enter bundle update and press Enter.\n   Build the site To build your Jekyll site locally:\n  Enter bundle exec jekyll serve and press Enter.\n  Copy the server address:\nhttp://127.0.0.1:4000\n  Paste it in your browser and you should see your site served locally.\n  Note\rTo stop the local server where your site is served, press Ctrl+C in the Command Prompt.\r\r Publish the site online  When you finish editing the site locally, it’s time to publish it online for everybody to see. For this example, I will use the Vercel platform to deploy and host your site. But first you need to upload your project folder to GitHub.\n Publish to GitHub To upload your project folder to GitHub:\n  In VSCode, open the project folder.\n  Select the Source Control icon.\n  Select Publish to GitHub.\n  Select Publish to GitHub public repository.\nWhen the project folder has been uploaded to the GitHub repository, you will see this success message.\n  Select Open in GitHub to view your project folder uploaded and synced to the GitHub repository.\n   Deploy to Vercel To publish your site online, you need to deploy it to Vercel.\n  Go to Vercel.\n  Select Continue with GitHub.\n  Select Import Project.\n  Select Continue to import your project from GitHub.\n  Provide the link to your GitHub repository and select Continue:\nhttps://github.com/ivancheban/aviator-jekyll-template-master\n  Enter the project name: for example, aviator-jekyll-template-master. Select Deploy.\nNote\rThis name will be used in the link to your site. You can always change the site name in the Vercel settings in Domains.\r\rNote\rThe project deploy takes several minutes. Be patient.\r\rWhen the deploy finishes you will see this nice success screen.\n  Select Visit to go to your API documentation site available online.\nYou should see your site similar to this:\nhttps://aviator-jekyll-template-master.vercel.app/\n  ","excerpt":"\rOur goal is to build and publish the API documentation site using …","ref":"/docs/static-site-generators/jekyll-api/","title":"Jekyll API site"},{"body":"\rOur goal is to build and publish the one-page online resume site using Jekyll and Vercel. The end result will look like this:\nhttps://online-cv-master.vercel.app\n\rPrerequisites  Assume that you have Jekyll, Git client, and Visual Studio Code editor installed on your computer. If not, read the Jekyll article first.\n To check that you have Jekyll installed:\n  Open Command Prompt.\n  Enter jekyll -v and press Enter.\n  To check that you have Git and VSCode installed:\n  In the Command Prompt, enter git --version.\n  Check that you have Visual Studio Code installed.\n   Download the theme  There are a lot of free preconfigured Jekyll themes that you can download from GitHub. You can view the list of themes for static site generators at JAMstack Themes. I used this theme for my online resume.\n To download the Jekyll theme for your online resume:\n  Go to the theme GitHub repository.\n  Select Code.\n  Select Download ZIP.\n  Save the zipped project folder to your computer.\n  Unzip the folder.\n   Launch the site locally  Before changing the data in this CV, let’s check how the site runs locally on your computer.\n Edit the config file To edit the _config.yml file:\n  Open the project folder in VSCode.\n  Select the _config.yml file.\n  Delete the line: baseurl: '/online-cv' #change it according to your repository name.\n  Delete the lines under the # Development Settings.\nport: 4000 host: 0.0.0.0 safe: false   This is how your _config.yml file should look. \n Install Bundler To install the Bundler:\n  In the file explorer, copy the path to the project folder.\nIn my case, it’s c:\\Users\\ivanc\\online-cv-master\n  In the Command Prompt, change the directory to your project folder path. Press Enter.\ncd c:\\Users\\ivanc\\online-cv-master\\\n  Enter gem install bundler and press Enter.\n  Enter the following commands:\nbundle init bundle install These commands created new Gemfile files in your project folder.\n  Open the Gemfile with Notepad.\n  Delete everything in this file.\n  Enter the following data and save the file.\nsource \"https://rubygems.org\" gem \"jekyll\"    Build the site To build your Jekyll site locally:\n  Enter jekyll serve and press Enter.\n  Copy the server address:\nhttp://127.0.0.1:4000/online-cv/\n  Paste it in your browser and you should see your site served locally.\n   Edit your resume  Now that you’ve built the resume site, it’s time to edit its data with your own.\n To edit the data in your resume:\n  In VSCode, open the project folder and select the data.yml file.\n  Edit the data in the resume with your own.\nNote\rWhen you edit the data in the resume, the changes are applied automatically to the site served locally. Refresh the page in your browser to see the changes.\r\r   Publish the site online  When you finish editing the site locally, it’s time to publish it online for everybody to see. For this example, I will use another nice platform to deploy and host your site, Vercel. But first you need to upload your project folder to GitHub.\n Publish to GitHub To upload your project folder to GitHub:\n  In VSCode, open the project folder.\n  Select the Source Control icon.\n  Select Publish to GitHub.\n  Select Publish to GitHub public repository.\nWhen the project folder has been uploaded to the GitHub repository, you will see this success message.\n  Select Open in GitHub to view your project folder uploaded and synced to the GitHub repository.\n   Deploy to Vercel To publish your site online, you need to deploy it to Vercel.\n  Go to Vercel.\n  Select Continue with GitHub.\n  Select Import Project.\n  Select Continue to import your project from GitHub.\n  Provide the link to your GitHub repository and select Continue:\nhttps://github.com/ivancheban/online-cv-master\n  Enter the project name: for example, online-cv-master. Select Deploy.\nNote\rThis name will be used in the link to your site. You can always change the site name in the Vercel settings in Domains.\r\rNote\rThe project deploy takes several minutes. Be patient.\r\rWhen the deploy finishes you will see this nice success screen.\n  Select Visit to go to your resume site available online.\nYou should see your site similar to this:\nhttps://online-cv-master.vercel.app/\n  ","excerpt":"\rOur goal is to build and publish the one-page online resume site …","ref":"/docs/static-site-generators/online-resume/","title":"Create online CV with Jekyll"},{"body":"\rНаша мета — створити й опублікувати сайт із документацією API, використовуючи Jekyll та Vercel. Кінцевий результат буде виглядати так:\nhttps://aviator-jekyll-template-master.vercel.app\n\rПопередні умови  Припустимо, що на вашому комп’ютері встановлено Jekyll, клієнт Git та редактор Visual Studio Code. Якщо ні, спочатку прочитайте статтю про Jekyll.\n Щоб перевірити, чи встановлено Jekyll:\n  Відкрийте командний рядок.\n  Уведіть jekyll -v і натисніть Enter.\n  Щоб перевірити, чи встановлено Git і VSCode:\n  У командному рядку введіть git --version.\n  Переконайтесь, що у вас встановлено Visual Studio Code.\n   Завантажте тему Щоб завантажити тему Jekyll для сайту з документацією API:\n  Перейдіть на сторінку репозиторію GitHub.\n  Виберіть Code.\n  Виберіть Download ZIP.\n  Збережіть архівовану папку проекту собі на комп’ютер.\n  Розпакуйте папку.\n   Запустіть сайт локально  Перш ніж публікувати цей сайт в інтернеті, давайте перевіримо, як він працює локально на вашому комп’ютері.\n Установіть Bundler   Перейдіть до розташування, де ви розпакували папку проекту.\n  Видаліть існуючі файли Gemfile і Gemfile.lock.\n  У провіднику файлів скопіюйте шлях до папки проекту.\nУ моєму випадку це c:\\Users\\ivanc\\aviator-jekyll-template-master\\\n  У командному рядку змініть каталог на шлях до папки проекту. Натисніть Enter.\ncd c:\\Users\\ivanc\\aviator-jekyll-template-master\\\n  Уведіть gem install bundler і натисніть Enter.\n  Уведіть такі команди.\nbundle init bundle install Ці команди створили нові файли Gemfile у папці вашого проекту.\n   Bundle update   Відкрийте файл Gemfile за допомогою Блокнота.\n  Видаліть усе в цьому файлі.\n  Введіть наступні дані та збережіть файл.\nsource 'https://rubygems.org' gem 'jekyll', '3.7.2' gem 'tzinfo-data' group :jekyll_plugins do gem 'jekyll-seo-tag', '2.4.0' gem 'jekyll-sitemap', '1.2.0' end   Уведіть bundle update і натисніть Enter.\n   Скомпілюйте сайт Щоб скомпілювати сайт Jekyll локально:\n  Уведіть bundle exec jekyll serve і натисніть Enter.\n  Скопіюйте адресу сервера:\nhttp://127.0.0.1:4000\n  Вставте його у свій браузер, і ви побачите, як ваш сайт запущено локально.\n  Примітка\rЩоб зупинити локальний сервер, на якому обслуговується ваш сайт, натисніть Ctrl+C у командному рядку.\r\r Опублікуйте сайт в інтернеті  Коли ви закінчите редагувати сайт локально, настав час опублікувати його в інтернеті, щоб його бачили всі. У цьому прикладі я буду використовувати платформу Vercel для розгортання та розміщення вашого сайту. Але спочатку потрібно завантажити папку проекту на GitHub.\n Завантажте на GitHub Щоб завантажити папку проекту на GitHub:\n  Відкрийте папку проекту у VSCode.\n  Виберіть піктограму Source Control.\n  Виберіть Publish to GitHub.\n  Виберіть Publish to GitHub public repository.\nКоли папку проекту буде завантажено до репозиторію GitHub, ви побачите це повідомлення про успішне завершення операції.\n  Виберіть Open in GitHub, щоб переглянути папку проекту, завантажену та синхронізовану в репозиторії GitHub.\n   Публікація за допомогою сервіса Vercel Щоб опублікувати свій сайт в інтернеті, скористайтеся сервісом Vercel.\n  Перейдіть на сторінку Vercel.\n  Виберіть Continue with GitHub.\n  Виберіть Import Project.\n  Виберіть Continue, щоб імпортувати ваш проект із GitHub.\n  Уведіть посилання на ваш репозиторий GitHub і виберіть Continue:\nhttps://github.com/ivancheban/aviator-jekyll-template-master\n  Уведіть назву проекту: наприклад, aviator-jekyll-template-master. Виберіть Deploy.\nПримітка\rЦю назву буде використано в посиланні на ваш сайт. Ви завжди можете змінити назву сайту в налаштуваннях Vercel у розділі Domains.\r\rПримітка\rКомпіляція проекту займає кілька хвилин. Наберіться терпіння.\r\rКоли компіляція закінчиться, ви побачите цей веселий екран про успішну публікацю сайту.\n  Виберіть Visit, щоб перейти на сторінку вашого сайту з документацією API, доступного онлайн.\nМаєте побачити ваш сайт, подібний до цього:\nhttps://aviator-jekyll-template-master.vercel.app/\n  ","excerpt":"\rНаша мета — створити й опублікувати сайт із документацією API, …","ref":"/ua/docs/static-site-generators/jekyll-api/","title":"Сайт для документації API на Jekyll"},{"body":"\rНаша мета — створити й опублікувати односторінковий сайт-резюме за допомогою Jekyll і Vercel. Кінцевий результат буде виглядати так:\nhttps://online-cv-master.vercel.app\n\rПередумови  Припустимо, що на вашому комп’ютері встановлено Jekyll, клієнт Git та редактор Visual Studio Code. Якщо ні, спочатку прочитайте статтю про Jekyll.\n Щоб перевірити, чи встановлений у вас Jekyll:\n  Відкрийте командний рядок.\n  Уведіть jekyll -v і натисніть Enter.\n  Щоб перевірити, чи встановлені Git і VSCode:\n  У командному рядку введіть git --version.\n  Переконайтесь, що у вас установлено Visual Studio Code.\n   Завантажте тему  Є багато безкоштовних попередньо налаштованих тем для Jekyll, які можна завантажити з GitHub. Ви можете переглянути список тем для генераторів статичних сайтів на JAMstack Themes. Я використав цю тему для мого онлайн-резюме.\n Щоб завантажити тему Jekyll для вашого онлайн-резюме:\n  Перейдіть до репозиторію GitHub для цієї теми.\n  Виберіть Code.\n  Виберіть Download ZIP.\n  Збережіть архівовану папку проекту на свій комп’ютер.\n  Розпакуйте папку.\n   Запустіть сайт локально  Перш ніж змінювати дані у цьому резюме, давайте перевіримо, як сайт працює локально на вашому комп’ютері.\n Відредагуйте конфігураційний файл Щоб відредагувати файл _config.yml:\n  Відкрийте папку проекту у VSCode.\n  Виберіть файл _config.yml.\n  Видаліть цей рядок: baseurl: '/online-cv' #change it according to your repository name.\n  Видаліть рядки нижче # Development Settings.\nport: 4000 host: 0.0.0.0 safe: false   Ось як має виглядати ваш файл _config.yml. \n Установіть Bundler Щоб установити Bundler:\n  У провіднику файлів скопіюйте шлях до папки проекту.\nУ моєму випадку це c:\\Users\\ivanc\\online-cv-master\n  У командному рядку змініть каталог на шлях до папки проекту. Натисніть Enter.\ncd c:\\Users\\ivanc\\online-cv-master\\\n  Уведіть gem install bundler і натисніть Enter.\n  Уведіть такі команди:\nbundle init bundle install Ці команди створили нові файли Gemfile у папці проекту.\n  Відкрийте Gemfile за домогою Блокнота.\n  Видаліть усе в цьому файлі.\n  Введіть наступні дані та збережіть файл.\nsource \"https://rubygems.org\" gem \"jekyll\"    Скомпілюйте сайт Щоб скомпілювати наш сайт за допомогою Jekyll локально:\n  Уведіть jekyll serve і натисніть Enter.\n  Скопіюйте адресу сервера:\nhttp://127.0.0.1:4000/online-cv/\n  Вставте адресу сервера у свій браузер, і ви побачите, як ваш сайт запуститься локально.\n   Відредагуйте своє резюме  Тепер, коли ви скомпілювали сайт з резюме, час замінити в ньому дані на власні.\n Щоб відредагувати дані у своєму резюме:\n  У VSCode відкрийте папку проекту й виберіть файл data.yml.\n  Замініть дані в резюме на власні.\nПримітка\rКоли ви змінюєте дані в резюме, зміни на сайті, запущеному локально, застосовуються автоматично. Оновіть сторінку у браузері, щоб побачити зміни.\r\r   Опублікуйте сайт в інтернеті  Коли закінчите редагувати сайт локально, час опублікувати його в інтернеті, щоб його бачили всі. Для цього прикладу я використаю іншу приємну платформу для розгортання та розміщення вашого сайта, Vercel. Але спочатку потрібно завантажити папку проекту на GitHub.\n Опублікувати на GitHub Щоб завантажити папку проекту на GitHub:\n  У VSCode відкрийте папку проекту.\n  Виберіть піктограму Source Control.\n  Виберіть Publish to GitHub.\n  Виберіть Publish to GitHub public repository.\nКоли папку проекту буде завантажено до репозиторія GitHub, ви побачите це повідомлення про успішне завершення операції.\n  Виберіть Open in GitHub, щоб переглянути папку проекту, завантажену та синхронізовану з репозиторієм GitHub.\n   Публікація сайта за допомогою сервіса Vercel Щоб опублікувати свій сайт в інтернеті, скористайтесь сервісом Vercel.\n  Перейдіть на сторінку Vercel.\n  Виберіть Continue with GitHub.\n  Виберіть Import Project.\n  Виберіть Continue, щоб імпортувати проект із GitHub.\n  Надайте посилання на ваш репозиторій GitHub і виберіть Continue:\nhttps://github.com/ivancheban/online-cv-master\n  Уведіть назву проекту: наприклад, online-cv-master. Виберіть Deploy.\nПримітка\rЦя назва буде використовуватися в посиланні на ваш сайт з резюме. Адресу вашого сайту можна буде змінити пізніше в налаштуваннях Vercel Domains.\r\rПримітка\rКомпіляція проекту займає кілька хвилин. Наберіться терпіння.\r\rКоли компіляція закінчиться, ви побачите цю веселу заставку про успішне завершення операції.\n  Виберіть Visit, щоб перейти на сайт з вашим резюме, доступним онлайн.\nМаєте побачити сайт, подібний до цього:\nhttps://online-cv-master.vercel.app/\n  ","excerpt":"\rНаша мета — створити й опублікувати односторінковий сайт-резюме за …","ref":"/ua/docs/static-site-generators/online-resume/","title":"Створити онлайн-резюме за допомогою Jekyll"},{"body":"\rThis section is about setting up various static site generators.\n\rIn these tutorials I will share my experience in setting up SSG such as Jekyll, Hugo, etc.\n","excerpt":"\rThis section is about setting up various static site generators.\n\rIn …","ref":"/docs/static-site-generators/","title":"Static Site Generators"},{"body":"\rУ цьому розділі йдеться про налаштування різноманітних генераторів статичних сайтів.\n\rУ цих інструкціях я розповім про мій досвід налаштування генераторів статичних сайтів: Jekyll, Hugo тощо.\n","excerpt":"\rУ цьому розділі йдеться про налаштування різноманітних генераторів …","ref":"/ua/docs/static-site-generators/","title":"Генератори статичних сайтів"},{"body":"\rOur goal is to install Hugo on a computer running Windows.\n\rInstall Chocolatey  First, go to the official Hugo installation page. As you see, there’s more than one way to skin a cat. I choose the Chocolatey option to install Hugo.\n To install Chocolatey:\n  Enter the following command in the Command Prompt. Press Enter.\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"   Check if you have Chocolatey installed: choco version\n   Install Hugo There are two versions of Hugo: standard and extended. Install the extended version as some themes require it.\n  To install the Hugo extended version using Chocolatey, enter:\nchoco install hugo-extended -confirm\n  To check if Hugo is installed:\nhugo version\nNow you are ready to start your journey with Hugo static site generator.\n  ","excerpt":"\rOur goal is to install Hugo on a computer running Windows.\n\rInstall …","ref":"/docs/static-site-generators/hugo-install/","title":"How to install Hugo on Windows"},{"body":"\rНаша мета — встановити Hugo на комп’ютері під управлінням Windows.\n\rВстановіть Chocolatey  Спочатку перейдіть на офіційну сторінку встановлення Hugo. Як бачите, існує багато способів установки. Я вибираю варіант Chocolatey для встановлення Hugo.\n Щоб установити Chocolatey:\n  Введіть таку команду в командному рядку. Натисніть клавішу Enter.\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"   Перевірте, чи встановлено Chocolatey: choco version\n   Установіть Hugo Існує дві версії Hugo: стандартна і розширена. Встановіть розширену версію, оскільки вона потрібна для деяких тем.\n  Щоб встановити розширену версію Hugo за допомогою Chocolatey, введіть:\nchoco install hugo-extended -confirm\n  Щоб перевірити, чи встановлено Hugo:\nhugo version\nТепер ви готові розпочати свою подорож із генератором статичних сайтів Hugo.\n  ","excerpt":"\rНаша мета — встановити Hugo на комп’ютері під управлінням Windows. …","ref":"/ua/docs/static-site-generators/hugo-install/","title":"Як встановити Hugo на Windows"},{"body":"\rIn this example, let’s build the API documentation site using the DocuAPI theme for Hugo static site generator. This Hugo theme is based on Slate. The end result will look similar to this site:\nhttps://docuapi-test.netlify.app\n\rPrerequisites   Check that you have Hugo installed: hugo version.\nIf you don’t have Hugo installed on your computer, read How to install Hugo on Windows.\n  Check that you have Git client installed: git version.\nIf you don’t have Git client installed on your computer, read how to install Git client.\n  Check that you have:\n VSCode installed on your computer A GitHub account A Netlify account     Download the theme To download the API documentation theme:\n  Go to the theme GitHub repository.\n  Download the zipped project folder.\n  Unzip the project folder.\n   Create Hugo project To set up a new Hugo project on your computer:\n  In the Command Prompt, enter: hugo new site docuapi where docuapi is the name of the Hugo project you want to create.\n  Copy the downloaded theme folder to the theme folder of your Hugo project.\nIn my case, I copy the docuapi-master folder to c:\\Users\\ivanc\\docuapi\\themes\\.\n  Rename the copied folder from docuapi-master to docuapi. This is the theme name.\n  Open the exampleSite folder in c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\.\n  Copy everything in the exampleSite folder in c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\ to the root of the project folder in c:\\Users\\ivanc\\docuapi\\. Replace the existing folders and files when asked.\n   Build site locally  Before publishing the site online, let’s see how it looks locally.\n To build your Hugo site locally:\n  In the command prompt, change the folder path to your Hugo folder: cd docuapi. Press Enter.\n  Enter hugo server. Press Enter.\nYour site is built and served on the local server.\n  Copy the server address //localhost:1313/ and paste it in your browser.\nYou should see this site in your browser.\n   Publish site online  You will use Netlify to deploy and host your Hugo API documentation site online. To publish your site online, you need to edit the configuration files and upload the project folder to GitHub first.\n Edit the configuration file To edit the Hugo site configuration file:\n  Open the docuapi folder in VSCode.\n  Select the config.toml file.\n  Edit the config.toml file.\ntheme = \"docuapi\" # themesdir = \"../..\" languageCode = \"en-us\" baseurl = \"/\" title = \"DocuAPI Example Site\" The config should look like this.\n   Edit the Netlify configuration file  You need to edit the Netlify configuration file for correct deploy to the Netlify service.\n To edit the Netlify config:\n  In VSCode, select the netlify.toml file. In my case, it’s located in c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\.\n  Edit the file.\n[context.production.environment] HUGO_VERSION = \"0.78.1\"   Change the value for HUGO_VERSION to your Hugo version.\nNote\rTo find out your Hugo version, enter hugo version in the Command Prompt.\r\rThe edited netlify.toml file should look like this.\n  Move the netlify.toml file from the theme folder c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\ to the project root folder c:\\Users\\ivanc\\docuapi\\.\n  Upload project folder to GitHub To upload the project folder to GitHub:\n  In VSCode, open the project folder.\n  Select the Source Control icon.\n  Select Publish to GitHub.\n  Select Publish to GitHub public repository.\nWhen the project folder has been uploaded to the GitHub repository, you will see the success message.\n  Select Open in GitHub to view your project folder uploaded and synced to the GitHub repository.\n   Publish with Netlify To publish your site online:\n  Log in to Netlify.\n  Select New site from Git.\n  Select GitHub.\n  Select your docuapi repository.\n  In the Build Command field, enter hugo.\n  In the Publish directory field, enter public.\n  Select Deploy site.\nWait until Netlify deploys your site with some funny name. You should see the green Published message.\n  To change the site name, select Site settings.\n  Select Change site name and enter the available name. In my case, it’s docuapi-test.\nYour site should be available now. You can view my test API documentation site here:\nhttps://docuapi-test.netlify.app/\n  ","excerpt":"\rIn this example, let’s build the API documentation site using the …","ref":"/docs/static-site-generators/hugo-api/","title":"Hugo API documentation site"},{"body":"\rНаша мета — видалити генератор статичних сайтів Hugo, встановлений на Windows.\n\rПеревірте версію Hugo Ви можете перевірити, чи встановлено Hugo, запустивши цю команду в командному рядку: hugo version\nЯкщо ви бачите версію Hugo, це означає, що Hugo встановлено на вашому комп’ютері.\n Дізнайтеся, як ви встановили Hugo Зараз я точно не пам’ятаю метод, який використовував для встановлення Hugo. Якщо ви перейдете на сторінку встановлення Hugo, там описано кілька способів встановлення Hugo під Windows. Я пам’ятаю, що використовував Chocolatey (Windows) як спосіб установлення.\nЯкщо ви використовували Chocolatey, спробуйте спочатку цю команду: choco uninstall hugo\nЯкщо ви бачите це повідомлення, слід вдатися до крайнього заходу.\n Видаліть папку Hugo У своєму провіднику файлів знайдіть і видаліть папку Hugo.\nУ моєму випадку це C:\\ProgramData\\chocolatey\\lib\\hugo-extended\nТепер перевірте версію Hugo: hugo version\nЯкщо ви бачите це повідомлення, Hugo видалено.\n Видаліть Chocolatey з Windows Як бонус, ось як видалити Chocolatey з комп’ютера.\n  Перевірте, чи встановлено Chocolatey на вашому комп’ютері: choco version\n  Знайдіть папку з Chocolatey і видаліть її.\nУ моєму випадку це C:\\ProgramData\\chocolatey\n  Введіть команду choco version.\nВи повинні побачити це повідомлення.\n  ","excerpt":"\rНаша мета — видалити генератор статичних сайтів Hugo, встановлений на …","ref":"/ua/docs/static-site-generators/remove-hugo/","title":"Як видалити Hugo з Windows"},{"body":"\rНаша мета — опублікувати сайт для документації API, використовуючи тему DocuAPI для генератора статичних сайтів Hugo. Творець цієї теми Hugo надихався відомою темою Slate. Кінцевий результат буде схожий на цей сайт:\nhttps://docuapi-test.netlify.app\n\rПопередні вимоги   Переконайтеся, що у вас встановлено Hugo: hugo version.\nЯкщо на вашому комп’ютері не встановлено Hugo, прочитайте статтю Як встановити Hugo на Windows.\n  Переконайтеся , що у вас встановлено клієнт Git: git version.\nЯкщо на вашому комп’ютері не встановлено клієнт Git, прочитайте як встановити клієнт Git.\n  Переконайтесь, що у вас:\n Встановлено VSCode Зареєстроано обліковий запис GitHub Зареєстроано обліковий запис Netlify     Завантажте тему Щоб завантажити тему Hugo для документації API:\n  Перейдіть до репозиторію GitHub для цієї теми.\n  Завантажте заархівовану папку проекту.\n  Розпакуйте папку проекту.\n   Створіть проект Hugo Щоб створити новий проект Hugo на комп’ютері:\n  У командному рядку введіть: hugo new site docuapi, де docuapi — назва проекту Hugo, який ви хочете створити.\n  Скопіюйте завантажену папку теми в папку theme вашого проекту Hugo.\nУ моєму випадку я копіюю папку docuapi-master до папки c:\\Users\\ivanc\\docuapi\\themes\\.\n  Перейменуйте скопійовану папку docuapi-master на docuapi. Це назва теми.\n  Відкрийте папку exampleSite у c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\.\n  Скопіюйте все, що знаходиться в папці exampleSite у c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\ до кореневої папки проекту в c:\\Users\\ivanc\\docuapi\\. Скопіюйте файли та папки із заміною.\n   Скомпілюйте сайт локально  Перш ніж публікувати сайт в Інтернеті, давайте подивимось, як він виглядає локально.\n Щоб скомпілювати сайт Hugo локально:\n  У командному рядку змініть шлях до папки з проектом Hugo: cd docuapi. Натисніть Enter.\n  Введіть hugo server. Натисніть Enter.\nВаш сайт скомпілюється та буде доступний на локальному сервері.\n  Скопіюйте адресу сервера //localhost:1313/ і вставте її в браузер.\nМаєте побачити цей сайт у своєму браузері.\n   Опублікуйте сайт в інтернеті  Використовуйте сервіс Netlify для розгортання та розміщення сайту в Інтернеті. Щоб сайт був доступний онлайн, спочатку відредагуйте файли конфігурації та завантажте папку проекту на GitHub.\n Відредагуйте файл конфігурації Щоб відредагувати файл конфігурації для сайту Hugo:\n  Відкрийте папку docuapi у редакторі VSCode.\n  Виберіть файл config.toml.\n  Відредагуйте файл config.toml.\ntheme = \"docuapi\" # themesdir = \"../..\" languageCode = \"en-us\" baseurl = \"/\" title = \"DocuAPI Example Site\" Ось так має виглядати відредагований файл конфігурації.\n   Відредайгуте файл конфігурації для сервісу Netlify  Щоб сервіс Netlify правильно скомпілював ваш сайт, йому потрібний файл конфігурації Netlify.\n Щоб відредагувати файл конфігурації Netlify:\n  У редакторі VSCode виберіть файл netlify.toml. У моєму випадку цей файл розташований тут: c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\.\n  Відредагуйте файл.\n[context.production.environment] HUGO_VERSION = \"0.78.1\"   Змініть значення версії Hugo для параметра HUGO_VERSION на вашу версію Hugo.\nПримітка\rЩоб дізнатися, яка у вас версія Hugo, введіть hugo version у командному рядку.\r\rВідредагований файл netlify.toml має виглядати так.\n  Перемістіть файл netlify.toml з папки теми у c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\ до кореневої папки проекту c:\\Users\\ivanc\\docuapi\\.\n  Завантажте папку проекту на GitHub Щоб завантажити папку проекту на GitHub:\n  Відкрийте папку проекту в редакторі VSCode.\n  Виберіть піктограму Source Control.\n  Виберіть Publish to GitHub.\n  Виберіть Publish to GitHub public repository.\nКоли папку проекту буде завантажено до репозиторія GitHub, ви побачите повідомлення про успішне завершення операції.\n  Виберіть Open in GitHub, щоб переглянути папку проекту, завантажену до репозиторія GitHub та синхронізовану з ним.\n   Опублікуйте сайт за допомогою сервіса Netlify Щоб зробити ваш сайт доступним онлайн:\n  Увійдіть до Netlify.\n  Виберіть New site from Git.\n  Виберіть GitHub.\n  Виберіть свій репозиторій docuapi.\n  У полі Build Command введіть hugo.\n  У полі Publish directory введіть public.\n  Виберіть Deploy site.\nЗачекайте, поки Netlify скомпілює ваш сайт з якоюсь кумедною назвою. Ви повинні побачити зелене повідомлення Published.\n  Щоб змінити назву сайте, виберіть Site settings.\n  Виберіть Change site name і введіть доступну назву. У моєму випадку це docuapi-test.\nВаш сайт вже має бути доступний онлайн. Ось як виглядає мій тестовий сайт з документацією API:\nhttps://docuapi-test.netlify.app/\n  ","excerpt":"\rНаша мета — опублікувати сайт для документації API, використовуючи …","ref":"/ua/docs/static-site-generators/hugo-api/","title":"Сайт для документації API на Hugo"},{"body":"\rOur goal is to remove Hugo static site generator installed on Windows.\n\rCheck Hugo version You can check if Hugo is installed by running this command in the Command Prompt: hugo version\nIf you see the Hugo version, it means Hugo is installed on your computer.\n Find out how you installed Hugo Now I don’t remember exactly the method that I used to install Hugo. If you go to the Hugo install page, there are several methods for installing Hugo on Windows. I recall that I used Chocolatey (Windows) as my installation method.\nIf you used Chocolatey, try this command first: choco uninstall hugo\nIf you see this message, you should use the last resort.\n Remove Hugo folder In your file explorer, find and delete the Hugo folder.\nIn my case, it’s C:\\ProgramData\\chocolatey\\lib\\hugo-extended\nNow check the Hugo version: hugo version\nIf you see this message, Hugo is uninstalled.\n Remove Chocolatey from Windows As a bonus, here’s how to uninstall Chocolatey from your computer.\n  Check if Chocolatey is installed on your computer: choco version\n  Find the folder with Chocolatey and delete it.\nIn my case it is C:\\ProgramData\\chocolatey\n  Enter the command choco version.\nYou should see this message.\n  ","excerpt":"\rOur goal is to remove Hugo static site generator installed on …","ref":"/docs/static-site-generators/remove-hugo/","title":"How to remove Hugo from Windows"},{"body":"In this section, I want to check how this theme treats Markdown syntax.\nImages Norway Spruce Picea abies shoot with foliage buds. Photo: Bjørn Erik Pedersen / CC-BY-SA\n\r Docsy theme examples Example sites that have low to no customization:\n   Site Repo (if public)     This Docsy documentation site https://github.com/google/docsy   “Goldydocs” - a Docsy example site https://github.com/google/docsy-example   https://www.kubeflow.org/ https://github.com/kubeflow/website   https://agones.dev/site/ https://github.com/GoogleCloudPlatform/agones/tree/master/site   https://googlecontainertools.github.io/kpt/ https://github.com/GoogleContainerTools/kpt/tree/master/docs    Customized Docsy examples Example sites that include a moderate to high amount of customization:\n   Site Repo (if public)     Knative https://github.com/knative/docs and https://github.com/knative/website   Apache Airflow https://github.com/apache/airflow-site/   Docsy Just Docs https://github.com/LisaFC/justdocs    ","excerpt":"In this section, I want to check how this theme treats Markdown …","ref":"/docs/experiment/","title":"Experiment"},{"body":"In this section, I want to check how this theme treats Markdown syntax.\nImages Norway Spruce Picea abies shoot with foliage buds. Photo: Bjørn Erik Pedersen / CC-BY-SA\n\r Docsy theme examples Example sites that have low to no customization:\n   Site Repo (if public)     This Docsy documentation site https://github.com/google/docsy   “Goldydocs” - a Docsy example site https://github.com/google/docsy-example   https://www.kubeflow.org/ https://github.com/kubeflow/website   https://agones.dev/site/ https://github.com/GoogleCloudPlatform/agones/tree/master/site   https://googlecontainertools.github.io/kpt/ https://github.com/GoogleContainerTools/kpt/tree/master/docs    Customized Docsy examples Example sites that include a moderate to high amount of customization:\n   Site Repo (if public)     Knative https://github.com/knative/docs and https://github.com/knative/website   Apache Airflow https://github.com/apache/airflow-site/   Docsy Just Docs https://github.com/LisaFC/justdocs    ","excerpt":"In this section, I want to check how this theme treats Markdown …","ref":"/ua/docs/experiment/","title":"Experiment"},{"body":"На цьому порталі з документацією ви знайдете відомості про генератори статичних сайтів та інші інструменти для технічних письменників. Цей сайт зроблений на основі теми Docsy за допомогою генератора статичних сайтів Hugo.\n","excerpt":"На цьому порталі з документацією ви знайдете відомості про генератори …","ref":"/ua/docs/","title":"Документація"},{"body":"This Documentation Portal provides information on static site generators and other tools for technical writers. This site is built using the Docsy theme and Hugo static site generator.\n","excerpt":"This Documentation Portal provides information on static site …","ref":"/docs/","title":"Technical Writer's Tools"},{"body":" \r#td-cover-block-0 {\rbackground-image: url(/featured-background_hua525ed89b2e0f74db6b4162c6aa21c3c_542290_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/featured-background_hua525ed89b2e0f74db6b4162c6aa21c3c_542290_1920x1080_fill_q75_catmullrom_top.jpg); }\r}\r\rResources for technical writers\rDownload   A Hugo theme for creating great technical documentation sites\n\r \r\r\r\r\r\r\rDocsy is a theme for the Hugo static site generator that’s specifically designed for technical documentation sets. You can use this theme for your own site.\n\r\r\r\r\r\rSee Docsy in action!\rAs well as this site, there’s a growing number of projects using Docsy for their doc sites.\nRead more …\n\r\r\rContributions welcome!\rUse Pull Request to contribute to this site on GitHub. Everyone can contribute.\nRead more …\n\r\r\rTechnical writers of Ukraine\rJoin the community of technical writers of Ukraine on Telegram. There we discuss everything related to this profession.\nRead more …\n\r\r\r\r","excerpt":" \r#td-cover-block-0 {\rbackground-image: …","ref":"/","title":"Resources for technical writers"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"},{"body":"","excerpt":"","ref":"/ua/search/","title":"Search Results"},{"body":" \r#td-cover-block-0 {\rbackground-image: url(/ua/featured-background_hua525ed89b2e0f74db6b4162c6aa21c3c_542290_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/ua/featured-background_hua525ed89b2e0f74db6b4162c6aa21c3c_542290_1920x1080_fill_q75_catmullrom_top.jpg); }\r}\r\rРесурси для техрайтерів\rЗавантажити   Тема Hugo для створення сайтів з документацією\n\r \r\r\r\r\r\r\rТема Docsy для генератора статичних сайтів Hugo спеціально створена для технічної документації.\n\r\r\r\r\r\rПриклади сайтів з темою Docsy\rЯк і власне цей сайт, існує кілька проектів з документацією, що використовують тему Docsy.\nДокладніше …\n\r\r\rДолучайтеся до розробки цього сайта!\rСтворіть Pull Request на GitHub, щоб додати свої зміни. Кожен може зробити свій внесок у розвиток цієї теми.\nДокладніше …\n\r\r\rДолучайтеся до спільноти техрайтерів\rДолучайтеся до спільноти техрайтерів України в Телеграм. Там ми обговорюємо все, що пов’язане з цією професією.\nДокладніше …\n\r\r\r\r","excerpt":" \r#td-cover-block-0 {\rbackground-image: …","ref":"/ua/","title":"Ресурси для техрайтерів"}]